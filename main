-- Entity Declaration
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity saltwater_chlorine_generator is
    Port (
        clk : in STD_LOGIC; -- Clock signal
        rst : in STD_LOGIC; -- Reset signal
        rotary_a : in STD_LOGIC; -- Rotary encoder signal A
        rotary_b : in STD_LOGIC; -- Rotary encoder signal B
        btn_add_salt : in STD_LOGIC; -- Button to add salt (Y16)
        sw_user_mode : in STD_LOGIC; -- Switch for user input mode (D18)
        btn_increase_temp : in STD_LOGIC; -- Button to increase temperature (M15)
        btn_increase_salt : in STD_LOGIC; -- Button to increase salt PPM (M14)
        btn_pump_control : in STD_LOGIC; -- Button to control pool pump (K19)
        -- Outputs to LEDs and displays
        led_flow_status : out STD_LOGIC_VECTOR (2 downto 0); -- RGB LED for water flow (LD5)
        led_system_status : out STD_LOGIC_VECTOR (2 downto 0); -- RGB LED for system status (LD6)
        ssd_display : out STD_LOGIC_VECTOR (7 downto 0); -- Seven-segment display
        oled_data : out STD_LOGIC_VECTOR (23 downto 0) -- OLED display data
    );
end saltwater_chlorine_generator;

-- Architecture Body
architecture Behavioral of saltwater_chlorine_generator is
    signal pool_size_gallons : integer := 0; -- Pool size in thousands of gallons
    signal salt_ppm : integer := 0; -- Salt concentration in parts per million (ppm)
    signal temperature : integer := 0; -- Water temperature
    signal water_flow_on : STD_LOGIC := '0'; -- Water flow status
    signal system_status : STD_LOGIC_VECTOR (2 downto 0) := "000"; -- System status (green initially)

    -- Signals for Pmod interfaces
    signal oled_init_done : STD_LOGIC := '0'; -- OLED initialization status
    signal ssd_init_done : STD_LOGIC := '0'; -- SSD initialization status
    signal enc_init_done : STD_LOGIC := '0'; -- Encoder initialization status

    -- Signals for OLED commands and data
    signal oled_command : STD_LOGIC_VECTOR(7 downto 0);
    signal oled_data_out : STD_LOGIC_VECTOR(23 downto 0);

    -- Signal for character data to OLED
    signal oled_data_to_write : std_logic_vector(23 downto 0);
  
    -- Character map for OLED display (replace with actual patterns)
    signal character_map : std_logic_vector(7 downto 0) := (others => '0');

    -- Signal for SSD display segments
    signal ssd_segments : STD_LOGIC_VECTOR (7 downto 0);

begin

    -- Initialization Process
    process(clk, rst)
    begin
        if rst = '1' then
            pool_size_gallons <= 0;
            salt_ppm <= 0;
            temperature <= 0;
            water_flow_on <= '0';
            system_status <= "000"; -- Green initially
            oled_init_done <= '0';
            ssd_init_done <= '0';
            enc_init_done <= '0';
        elsif rising_edge(clk) then
            -- Initialization code for Pmods, LEDs, and other peripherals

            -- Initialize Pmod OLEDrgb
            if oled_init_done = '0' then
                -- Send initialization commands to OLED display
                oled_command <= x"AE"; -- Set display OFF
                wait for 10 ns;

                oled_command <= x"81"; -- Set contrast control
                oled_data_out <= x"7F"; -- Example contrast value
                wait for 10 ns;

                oled_command <= x"A0"; -- Set segment re-map
                wait for 10 ns;

                oled_command <= x"A1"; -- Set display start line
                wait for 10 ns;

                oled_command <= x"A6"; -- Set normal display
                wait for 10 ns;

                oled_command <= x"AF"; -- Set display ON
                wait for 10 ns;

                oled_init_done <= '1'; -- Mark OLED initialization as done
            end if;

            -- Initialize Pmod SSD
            if ssd_init_done = '0' then
                -- Clear the SSD display
                ssd_segments <= "00000000"; -- Clear display segments
                wait for 10 ns;

                ssd_init_done <= '1'; -- Mark SSD initialization as done
            end if;

            -- Initialize Pmod ENC
            if enc_init_done = '0' then
                -- Placeholder for actual encoder setup code
                -- Initialize rotary encoder input processing
                enc_init_done <= '1'; -- Mark encoder initialization as done
            end if;

            -- Initialize LEDs
            led_flow_status <= "000"; -- Green initially
            led_system_status <= "000"; -- Green initially
        end if;
    end process;

     -- Character map for OLED display (replace with actual patterns)
    process(clk)
    begin
        if rising_edge(clk) then
          character_map('0') <= x"3F";
          character_map('1') <= x"06";
          character_map('2') <= x"5B";
          character_map('3') <= x"4F";
          character_map('4') <= x"66";
          character_map('5') <= x"6D";
          character_map('6') <= x"7D";
          character_map('7') <= x"07";
          character_map('8') <= x"7F";
          character_map('9') <= x"6F";
          character_map('F') <= x"0A"; -- Character for "°F" (replace if using Celcius for whatevever reason)
        end if;
    end process;

    -- User Input Handling Process
    process(clk, rst)
    begin
        if rst = '1' then
            -- Reset user input values
            pool_size_gallons <= 0;
            salt_ppm <= 0;
            temperature <= 0;
        elsif rising_edge(clk) then
            -- Handle user input for initial settings
            if sw_user_mode = '1' then
                -- User input mode
                if rotary_a = '1' and rotary_b = '0' then
                    -- Handle rotary encoder input for navigating menus
                elsif rotary_a = '0' and rotary_b = '1' then
                    -- Handle rotary encoder input for changing values
                end if;
                
                if btn_increase_salt = '1' then
                    -- Change salt PPM
                    salt_ppm <= salt_ppm + 500; -- Increment by 500 ppm
                elsif btn_increase_temp = '1' then
                    -- Change temperature
                    temperature <= temperature + 1; -- Increment temperature by 1 degree
                end if;
                
                if btn_add_salt = '1' then
                    -- Add salt
                    salt_ppm <= salt_ppm + 20;
                    -- Trigger remeasurement logic
                end if;
            else
                -- Normal running mode
            end if;
        end if;
    end process;

    -- Convert data to characters and update OLED (example for temperature)
    process(clk, rst)
    begin
        if rising_edge(clk) then
          if sw_user_mode = '0' then -- Update in normal mode
            temp_char(3 downto 0) <= conv_integer_to_string(temperature(3 downto 0), 4); -- Assuming conv_integer_to_string converts to a 4-bit character
            oled_data_to_write <= character_map(temp_char(3)) & character_map(temp_char(2)) & character_map(temp_char(1)) & character_map(temp_char(0)) & x"0A"; -- Add "°C" character
          end if;
        end if;
    end process;

    -- Write data to OLED
    process(clk, rst)
    begin
        if rising_edge(clk) then
          if sw_user_mode = '0'
      then -- Update in normal mode
        oled_command <= x"C0"; -- Write to display RAM
        wait for 10 ns;
        oled_data_out <= oled_data_to_write;
      end if;
    end if;
  end process;

  -- Update LEDs based on system status (placeholder)
  process(clk, rst)
  begin
    if rising_edge(clk) then
      if water_flow_on = '1' then
        led_flow_status <= "010"; -- Green for water flow
      else
        led_flow_status <= "000"; -- Off if no flow
    end if;
  -- Update system status LED based on additional logic
    led_system_status <= "100"; -- Example: Yellow for normal operation
    end if;
  end process;

end Behavioral;
